{"name": "登录账号参数化测试_daniel.tl.lo@pccw.com.uatc", "status": "failed", "statusDetails": {"message": "AssertionError: Target element not find.", "trace": "self = <airtest_selenium.proxy.WebChrome (session=\"7d360c6a7a936e646d1adfdc9ee6ba46\")>\nparam = '/html/body/div[4]/div[1]/section/header/div[1]/div/span'\noperation = 'xpath', msg = 'Sandbox: UATC'\n\n    @logwrap\n    def assert_exist(self, param, operation, msg=\"\"):\n        \"\"\"\n        Assert element exist.\n    \n        Args:\n            operation: the method that to find the element.\n            param: the param of method.\n        Raise:\n            AssertionError - if assertion failed.\n        \"\"\"\n        try:\n            func = self.operation_to_func[operation]\n        except Exception:\n            raise AssertionError(\"There was no operation: %s\" % operation)\n        try:\n>           func(param)\n\n..\\venv\\Lib\\site-packages\\airtest_selenium\\proxy.py:275: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\venv\\Lib\\site-packages\\airtest\\utils\\logwraper.py:124: in wrapper\n    res = f(*args, **kwargs)\n..\\venv\\Lib\\site-packages\\airtest_selenium\\proxy.py:144: in find_element_by_xpath\n    log_res = self._gen_screen_log(web_element)\n..\\venv\\Lib\\site-packages\\airtest\\utils\\logwraper.py:124: in wrapper\n    res = f(*args, **kwargs)\n..\\venv\\Lib\\site-packages\\airtest_selenium\\proxy.py:321: in _gen_screen_log\n    self.screenshot(jpg_path)\n..\\venv\\Lib\\site-packages\\airtest_selenium\\proxy.py:335: in screenshot\n    self.save_screenshot(file_path)\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1043: in save_screenshot\n    return self.get_screenshot_as_file(filename)\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1020: in get_screenshot_as_file\n    png = self.get_screenshot_as_png()\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1052: in get_screenshot_as_png\n    return base64.b64decode(self.get_screenshot_as_base64().encode('ascii'))\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1062: in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)['value']\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:320: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000022F54D0B5D0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...dInitThunk [0x75637D59+25]\\\\n\\\\tRtlInitializeExceptionChain [0x7726B79B+107]\\\\n\\\\tRtlClearBits [0x7726B71F+191]\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=115.0.5790.110)\n\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:242: NoSuchWindowException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <salesforce_web_test_me.TestCase.test_WaitMessages.TestWaitMessages object at 0x0000022F54CFD250>\nbefore = <airtest_selenium.proxy.WebChrome (session=\"7d360c6a7a936e646d1adfdc9ee6ba46\")>\nusername = 'daniel.tl.lo@pccw.com.uatc', password = 'Mccph198'\nsender_phone_no = '85254105130', receiver_phone_number = '85251187287'\nsender_id = 'csl UATB Testing 2 (54105130)', whatsapp_contact_no = '54105130'\nwhatsapp_alt_contact = 'csl UATB Testing 2'\n\n    @pytest.mark.parametrize(\n        \"username, password, sender_phone_no, receiver_phone_number, sender_id, whatsapp_contact_no, whatsapp_alt_contact\", excel_data)\n    def test_wait_messages(self, before, username, password, sender_phone_no, receiver_phone_number, sender_id, whatsapp_contact_no, whatsapp_alt_contact):\n        driver = before\n        allure.dynamic.title(\"登录账号参数化测试_%s\" % username)\n>       WaitingMessages(driver).test_bot_expiry_queue_wait_case_wait(contact=whatsapp_contact_no, alt_contact=whatsapp_alt_contact, username=username, password=password)\n\ntest_WaitMessages.py:25: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\BLL\\WaitingMessages\\WaitingMessages.py:20: in test_bot_expiry_queue_wait_case_wait\n    bot_expiry = self.wm.test_bot_expiry(contact, alt_contact, username, password)\n..\\Element\\WaitingMessages\\WaitingMessages.py:93: in test_bot_expiry\n    LoginPage(self.airtest_driver).login(username, password)\n..\\BLL\\LoginPage\\LoginPage.py:16: in login\n    self.element.check_login_status()\n..\\Element\\LoginPage\\LoginPage.py:38: in check_login_status\n    self.driver.assert_element(xpath1, \"Sandbox: UATC\")\n..\\Common\\Tool.py:90: in assert_element\n    self.driver.assert_exist(xpath, \"xpath\", msg)\n..\\venv\\Lib\\site-packages\\airtest\\utils\\logwraper.py:124: in wrapper\n    res = f(*args, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <airtest_selenium.proxy.WebChrome (session=\"7d360c6a7a936e646d1adfdc9ee6ba46\")>\nparam = '/html/body/div[4]/div[1]/section/header/div[1]/div/span'\noperation = 'xpath', msg = 'Sandbox: UATC'\n\n    @logwrap\n    def assert_exist(self, param, operation, msg=\"\"):\n        \"\"\"\n        Assert element exist.\n    \n        Args:\n            operation: the method that to find the element.\n            param: the param of method.\n        Raise:\n            AssertionError - if assertion failed.\n        \"\"\"\n        try:\n            func = self.operation_to_func[operation]\n        except Exception:\n            raise AssertionError(\"There was no operation: %s\" % operation)\n        try:\n            func(param)\n        except Exception as e:\n>           raise AssertionError(\"Target element not find.\")\nE           AssertionError: Target element not find.\n\n..\\venv\\Lib\\site-packages\\airtest_selenium\\proxy.py:277: AssertionError"}, "steps": [{"name": "Input username", "status": "passed", "steps": [{"name": "Input text：daniel.tl.lo@pccw.com.uatc", "status": "passed", "start": 1690534135728, "stop": 1690534138418}], "parameters": [{"name": "username", "value": "'daniel.tl.lo@pccw.com.uatc'"}], "start": 1690534135728, "stop": 1690534138418}, {"name": "Input password", "status": "passed", "steps": [{"name": "Input text：Mccph198", "status": "passed", "start": 1690534138418, "stop": 1690534141010}], "parameters": [{"name": "password", "value": "'Mccph198'"}], "start": 1690534138418, "stop": 1690534141010}, {"name": "Click login button", "status": "passed", "steps": [{"name": "Click content：//*[@id=\"Login\"]", "status": "passed", "start": 1690534141010, "stop": 1690534144502}], "start": 1690534141010, "stop": 1690534144502}, {"name": "Check login status", "status": "passed", "steps": [{"name": "Assert content：/html/body/div[4]/div[1]/section/header/div[1]/div/span", "status": "passed", "start": 1690534144502, "stop": 1690534147199}], "start": 1690534144502, "stop": 1690534147199}, {"name": "Close all redundant tabs", "status": "passed", "steps": [{"name": "Click content：/html/body/div[4]/div[1]/section/div[1]/div/div[1]/div[2]/div/div/ul[2]/li[2]/div[2]/button", "status": "passed", "start": 1690534149902, "stop": 1690534151598}], "start": 1690534149882, "stop": 1690534152599}, {"name": "Search for contact", "status": "passed", "parameters": [{"name": "contact", "value": "'54105130'"}, {"name": "alt_contact", "value": "'csl UATB Testing 2'"}], "start": 1690534204048, "stop": 1690534212110}, {"name": "Send text thru chat box", "status": "passed", "parameters": [{"name": "message", "value": "'Hey, this is a bot expiry test'"}], "start": 1690534212111, "stop": 1690534219219}, {"name": "Input username", "status": "passed", "steps": [{"name": "Input text：daniel.tl.lo@pccw.com.uatc", "status": "passed", "start": 1690534221578, "stop": 1690534224390}], "parameters": [{"name": "username", "value": "'daniel.tl.lo@pccw.com.uatc'"}], "start": 1690534221578, "stop": 1690534224390}, {"name": "Input password", "status": "passed", "steps": [{"name": "Input text：Mccph198", "status": "passed", "start": 1690534224391, "stop": 1690534227273}], "parameters": [{"name": "password", "value": "'Mccph198'"}], "start": 1690534224391, "stop": 1690534227273}, {"name": "Click login button", "status": "passed", "steps": [{"name": "Click content：//*[@id=\"Login\"]", "status": "passed", "start": 1690534227274, "stop": 1690534234699}], "start": 1690534227273, "stop": 1690534234699}, {"name": "Check login status", "status": "failed", "statusDetails": {"message": "AssertionError: Target element not find.\n", "trace": "  File \"C:\\Users\\user\\Desktop\\Github\\salesforce_web_test_me\\venv\\Lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"C:\\Users\\user\\Desktop\\Github\\salesforce_web_test_me\\Element\\LoginPage\\LoginPage.py\", line 38, in check_login_status\n    self.driver.assert_element(xpath1, \"Sandbox: UATC\")\n  File \"C:\\Users\\user\\Desktop\\Github\\salesforce_web_test_me\\Common\\Tool.py\", line 90, in assert_element\n    self.driver.assert_exist(xpath, \"xpath\", msg)\n  File \"C:\\Users\\user\\Desktop\\Github\\salesforce_web_test_me\\venv\\Lib\\site-packages\\airtest\\utils\\logwraper.py\", line 124, in wrapper\n    res = f(*args, **kwargs)\n          ^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\user\\Desktop\\Github\\salesforce_web_test_me\\venv\\Lib\\site-packages\\airtest_selenium\\proxy.py\", line 277, in assert_exist\n    raise AssertionError(\"Target element not find.\")\n"}, "steps": [{"name": "Assert content：/html/body/div[4]/div[1]/section/header/div[1]/div/span", "status": "failed", "statusDetails": {"message": "AssertionError: Target element not find.\n", "trace": "  File \"C:\\Users\\user\\Desktop\\Github\\salesforce_web_test_me\\Common\\Tool.py\", line 90, in assert_element\n    self.driver.assert_exist(xpath, \"xpath\", msg)\n  File \"C:\\Users\\user\\Desktop\\Github\\salesforce_web_test_me\\venv\\Lib\\site-packages\\airtest\\utils\\logwraper.py\", line 124, in wrapper\n    res = f(*args, **kwargs)\n          ^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\user\\Desktop\\Github\\salesforce_web_test_me\\venv\\Lib\\site-packages\\airtest_selenium\\proxy.py\", line 277, in assert_exist\n    raise AssertionError(\"Target element not find.\")\n"}, "start": 1690534234700, "stop": 1690534243294}], "start": 1690534234700, "stop": 1690534243296}], "parameters": [{"name": "username", "value": "'daniel.tl.lo@pccw.com.uatc'"}, {"name": "password", "value": "'Mccph198'"}, {"name": "sender_phone_no", "value": "'85254105130'"}, {"name": "receiver_phone_number", "value": "'85251187287'"}, {"name": "sender_id", "value": "'csl UATB Testing 2 (54105130)'"}, {"name": "whatsapp_contact_no", "value": "'54105130'"}, {"name": "whatsapp_alt_contact", "value": "'csl UATB Testing 2'"}], "start": 1690534106565, "stop": 1690534243305, "uuid": "283a5827-fd66-4810-8148-661f539c3501", "historyId": "b2d32d90bf064e4d86c5272b715fc2e6", "testCaseId": "92cf639ae5b49d662ca49cb2b65585c0", "fullName": "test_WaitMessages.TestWaitMessages#test_wait_messages", "labels": [{"name": "story", "value": "登录账号参数化测试"}, {"name": "suite", "value": "test_WaitMessages"}, {"name": "subSuite", "value": "TestWaitMessages"}, {"name": "host", "value": "DESKTOP-569R7GO"}, {"name": "thread", "value": "37248-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_WaitMessages"}]}